<?php$Frm_cad = true;// fala pra sessão não encerra pois é uma janela de cadastroset_time_limit(0);require_once "../../../../sessao.php";require_once("../../../../conexao.php");$cfg->set_model_directory('../../../../models/');// variavel com o id do retorno$FRM_id_ret = isset($_POST['id']) ? $_POST['id'] : tool::msg_erros("O Campo id é Obrigatorio.");// query para recupera o path do arquivo$Query_retorno = retornos::find($FRM_id_ret);/********************************************************** verificamos se o arquivo ja não foi tratado ****************************************************/if ($Query_retorno->status != 0) {    echo("<div class='uk-alert uk-alert-warning'><i class='uk-icon-warning uk-text-warning' ></i> Arquivo Já Processado!</br></div>");    die();}// definição do arquivo de log$filename_log = "LOG_" . date("dmY") . "_retorno_id_" . $FRM_id_ret . ".txt";$conteudo = '########################################### ARQUIVO DE LOG DE TRATAMENTO DO RETORNO ###########################################' . chr(13) . chr(10);$conteudo .= '##  ARQUIVO ' . $Query_retorno->nm_arquivo . chr(13) . chr(10);$conteudo .= '##  Data ' . date("d/m/Y") . chr(13) . chr(10);$conteudo .= chr(13) . chr(10);// caminho do arquivo a ser tratado$arquivo = $Query_retorno->path . "/" . $Query_retorno->nm_arquivo;// ABRE O ARQUIVO$lendo = @fopen($arquivo, "r");// variaveis privadas$registros = 0;$creditos = 0;$debitos = 0;$compensados = 0;$baixados = 0;$cancelados = 0;$alterados = 0;$erros = 0;$sequencial = "000001";$titulos = "";/********************************************************** Caso ocorra algum erro ao abrir o arquivo **********************************************************/if (!$lendo) {    echo("<div class='uk-alert uk-alert-warning'><i class='uk-icon-warning uk-text-warning' ></i>Erro ao abrir arquivo!</br></div>");    die();}while (!feof($lendo)) {    $linha = " " . fgets($lendo, 4096);    $tipo_reg = substr($linha, 1, 1);   // Tipo de Registro - Código adotado pela FEBRABAN para identificar o tipo de registro:    // 0=Header de Arquivo, 1=Header de Lote, 3=Detalhe, 5=Trailer de Lote, 9=Trailer de Arquivo.// validamos o sequencial de linha do arquivo    $sequencial_ret = tool::completazeros(6, substr($linha, 395, 6));// falidamos a ultima linha do arquivo e paramos a execução    if ($sequencial != $sequencial_ret) {        if ($sequencial_ret != "000000") {            echo "<div class='uk-alert uk-alert-success' style='margin:0;'> Arquivo corrompido sequencial " . $sequencial_ret . " </div></br>";            $erros++;            continue;        }    } else {        $sequencial++;    }    /********************************************************** se o segmento da linha for 0 header ***********************************************/    if ($tipo_reg == 0) {        /*        1   001 001 001 9(001)  Identificação do Registro Header: “0”        2   002 002 001 9(001)  Tipo de Operação: “2”        3   003 009 007 A(007)  Identificação Tipo de Operação “RETORNO”        4   010 011 002 9(002)  Identificação do Tipo de Serviço: “01”        5   012 019 008 A(008)  Identificação por Extenso do Tipo de Serviço:“COBRANÇA”        6   020 026 007 A(007)  Complemento do Registro: Brancos        7   027 030 004 9(004)  Prefixo da Cooperativa: vide planilha "Capa" deste arquivo        8   031 031 001 A(001)  Dígito Verificador do Prefixo: vide planilha "Capa" deste arquivo        9   032 039 008 9(008)  Código do Cliente/Beneficiário: vide planilha "Capa" deste arquivo        10  040 040 001 A(001)  Dígito Verificador do Código: vide planilha "Capa" deste arquivo        11  041 046 006 9(006)  Número do convênio líder: Brancos        12  047 076 030 A(030)  Nome do Beneficiário        13  077 094 018 A(018)  Identificação do Banco: "756BANCOOBCED"        14  095 100 006 9(006)  Data da Gravação do Retorno: formato ddmmaa        15  101 107 007 9(007)  Seqüencial do Retorno: número seqüencial atribuído pelo Sicoob, acrescido de 1 a cada retorno. Inicia com "0000001"        16  108 394 287 A(287)  Complemento do Registro: Brancos        17  395 400 006 9(006)  Seqüencial do Registro:”000001”        */        $h_cod_banco = substr($linha, 27, 3);   //Código do banco na compensação        $lote_interno = substr($linha, 95, 4) . substr(date("Y"), 0, 2) . substr($linha, 99, 2); //Lote de serviço - Número seqüencial para identificar um lote de serviço. DDMMYY de geração do arquivo        $h_lote = substr($linha, 101, 7); //Lote de serviço - Número seqüencial para identificar um lote de serviço.        /* validamos o lote*/        $Query_retorno_lote = retornos::find_by_lote_retorno($lote_interno);        if (count($Query_retorno_lote) > 0) {            $lote_interno = $lote_interno . "_1"; //Lote de serviço - Número seqüencial para identificar um lote de serviço. DDMMYY de geração do arquivo mais numero        }    }    /********************************************************** se o segmento da linha for 1 detalhe ***********************************************/    if ($tipo_reg == 1) {        $registros++; // contador de registros        $d_tp_beneficiario = substr($linha, 2, 2);                 // Tipo do beneficiario  01= cpf 02= cnpj        $d_doc_beneficiario = substr($linha, 4, 14);                // Número do CPF/CNPJ do Beneficiário        $d_id_titulo_banco = ltrim(substr($linha, 63, 11), "0");   // Identificação do titulo no banco - Número adotado pelo Banco Cedente para identificar o Título.        $d_dv_id_titulo_banco = substr($linha, 74, 1);                // divisor do nosso numero.        $d_cod_mov = substr($linha, 109, 2);               /* cod de identificação do tipo de movimentação do titulo no banco                                                              "Comando/Movimento:                                                              02 = Confirmação Entrada Título;                                                              05 = Liquidação Sem Registro: Identifica a liquidação de título da modalidade ""SEM REGISTRO"";                                                              06 = Liquidação Normal: Identificar a liquidação de título de modalidade ""REGISTRADA"", com exceção dos títulos que forem liquidados em cartório (Cód. de movimento 15=Liquidação em Cartório);                                                              09 = Baixa de Titulo: Identificar as baixas de títulos, com exceção da baixa realizada com o cód. de movimento 10 (Baixa - Pedido Beneficiário);                                                              10 = Baixa Solicitada (Baixa - Pedido Beneficiário): Identificar as baixas de títulos comandadas a pedido do Beneficiário;                                                              11 = Títulos em Ser: Identifica os títulos em carteira, que estiverem com a situação ""em abarto"" (vencidos e a vencer).                                                              14 = Alteração de Vencimento;                                                              15 = Liquidação em Cartório: Identifica as liquidações dos títulos ocorridas em cartórios de protesto;                                                              23 = Encaminhado a Protesto: Identifica o recebimento da instrução de protesto                                                              27 = Confirmação Alteração Dados.                                                              48 = Confirmação de instrução de transferência de carteira/modalidade de cobrança"                                                            */        $d_id_titulo_cliente = ltrim(substr($linha, 117, 10), "0");  // Identificação do titulo no cliente - Número adotado pelo cliente Cedente para identificar o Título.// Data pagamento YYYY-mm-dd        $d_dt_liquidacao = substr(date("Y"), 0, 2) . substr(substr($linha, 111, 6), 4, 2) . '-' .            substr(substr($linha, 111, 6), 2, 2) . '-' .            substr(substr($linha, 111, 6), 0, 2);// Data de vencimento do titulo - Data de vencimento do título de cobrança.        $d_dt_vencimento = substr(date("Y"), 0, 2) . substr(substr($linha, 147, 6), 4, 2) . '-' .            substr(substr($linha, 147, 6), 2, 2) . '-' .            substr(substr($linha, 147, 6), 0, 2);// Valor nominal do titulo - Valor original do Título. Quando o valor for expresso em moeda corrente, utilizar 2 casas decimais.        $d_v_nominal = substr($linha, 153, 13);        $d_v_nominal = substr($d_v_nominal, 0, 11) . '.' . substr($d_v_nominal, 11, 2);// Data da efetivação do credito - Data de efetivação do crédito referente ao pagamento do título de cobrança.        $d_dt_efetivacao = substr(date("Y"), 0, 2) . substr(substr($linha, 176, 6), 4, 2) . '-' .            substr(substr($linha, 176, 6), 2, 2) . '-' .            substr(substr($linha, 176, 6), 0, 2);// Valor da tarifa/custas        $d_v_tarifa_custas = substr($linha, 182, 7);        $d_v_tarifa_custas = substr($d_v_tarifa_custas, 0, 5) . '.' . substr($d_v_tarifa_custas, 5, 2);        $d_v_pago = substr($linha, 254, 13); // Valor pago pelo sacado - Valor do pagamento efetuado pelo Sacado referente ao título de cobrança, expresso em moeda corrente.        $d_v_pago = substr($d_v_pago, 0, 11) . '.' . substr($d_v_pago, 11, 2);        /********************************************************** consulta o titulo no banco de dados ***************************************************************/        $titulo = titulos::find_by_sql("SELECT id,tp_sacado,sacado,status,dt_pagamento                                FROM titulos_bancarios                                WHERE empresas_id='" . $COB_Empresa_Id . "' AND contas_bancarias_id='" . $Query_retorno->contas_bancarias_id . "' AND nosso_numero='" . $d_id_titulo_banco . "'");        /********************************************************** verificamos se encontrou o titulo *****************************************************************/        if (!$titulo) {            $conteudo .= strtoupper(tool::CompletaZeros(5, $registros) . " ## INCONSISTENTE ## NÃO encontrado na base de dados o nosso numero nº " . tool::CompletaZeros(11, $d_id_titulo_banco) . "numero doc nº " . $d_id_titulo_cliente);            $conteudo .= chr(13) . chr(10); //  essa é a quebra de linha            $erros++;            continue;        } else {            if (($titulo[0]->status == 1 && $d_cod_mov != 10) || ($titulo[0]->status == 1 && $d_cod_mov != 6)) {                $dt_pgto = new ActiveRecord\DateTime($titulo[0]->dt_pagamento);                if ($dt_pgto->format('Ymd') != str_replace("-", "", $d_dt_liquidacao)) {                    echo "<hr><div class='uk-alert uk-alert-warning' style='margin-bottom:0px;'> Encontramos um titulo pago favor verificar se o mesmo foi pago no cedente ou pago em duplicidade nº " . $d_id_titulo_banco . "-" . $d_dv_id_titulo_banco . "</div></br>";                    $conteudo .= strtoupper(tool::CompletaZeros(5, $registros) . " ## TITULO PAGO EM DUPLICIDADE OU PAGO NO CEDENTE ## Titulo nº " . tool::CompletaZeros(11, $d_id_titulo_banco) . "-" . $d_dv_id_titulo_banco);                    $conteudo .= chr(13) . chr(10); //  essa é a quebra de linha                    continue;                } else {                    echo "<hr><div class='uk-alert uk-alert-warning' style='margin-bottom:0px;'> Titulo já processado nº " . $d_id_titulo_banco . "-" . $d_dv_id_titulo_banco . "</div></br>";                    $conteudo .= strtoupper(tool::CompletaZeros(5, $registros) . " ## TITULO JÁ PROCESSADO ## Titulo nº " . tool::CompletaZeros(11, $d_id_titulo_banco) . "-" . $d_dv_id_titulo_banco);                    $conteudo .= chr(13) . chr(10); //  essa é a quebra de linha                    continue;                }            }        }        if ($d_cod_mov == "02") {                                     /* codigo de confirmação de entrada de titulo*/            /******************************************************************** atualiza o titulo ********************************************************************/            $up_titulo = titulos::find($titulo[0]->id);            $up_titulo->update_attributes(array('obs' => '<i class="uk-icon-small uk-icon-check uk-text-primary "></i> Entrada de titulo confirmada pelo banco', 'cod_retorno' => $lote_interno));            /******************************************************************** escreve no log ********************************************************************/            $conteudo .= strtoupper(tool::CompletaZeros(5, $registros) . " ## ENTRADA CONFIRMADA ## Titulo nº " . tool::CompletaZeros(11, $d_id_titulo_banco) . "-" . $d_dv_id_titulo_banco);            $conteudo .= chr(13) . chr(10); //  essa é a quebra de linha            continue;        }        if ($d_cod_mov == "06") {                                     /* codigo de baixa de titulo*/            $creditos += $d_v_pago;                  /* total pago pelo titulo */            $debitos += $d_v_tarifa_custas;         /* total da tarifa paga pelo titulo */            $titulos .= $d_id_titulo_banco . ',';                     /* titulos que compoem o valor creditado no caixa */            /* verifica se houve multa e juros*/            $TT_jurosmulta = $d_v_pago - $d_v_nominal;            if ($d_v_pago > $d_v_nominal) {                $vlr_acrescimos = $TT_jurosmulta;            } else {                $vlr_acrescimos = "0.00";            }            /* recuperamos todas as parcelas referentes aquele titulo*/            $Q_faturamento = faturamentos::find_by_sql("SELECT faturamentos.id,faturamentos.matricula,faturamentos.referencia,convenios.tipo_convenio,planos.seguro,procedimentos.valor as valor_pro                                              FROM faturamentos                                              LEFT JOIN convenios ON faturamentos.convenios_id = convenios.id                                              LEFT JOIN dados_cobranca ON dados_cobranca.id =  faturamentos.dados_cobranca_id                                              LEFT JOIN associados ON faturamentos.matricula =  associados.matricula                                              LEFT JOIN procedimentos ON procedimentos.faturamentos_id =  faturamentos.id                                              LEFT JOIN planos ON planos.id = dados_cobranca.planos_id                                              WHERE titulos_bancarios_id='" . $titulo[0]->id . "' AND contas_bancarias_id='" . $Query_retorno->contas_bancarias_id . "'");            $t_parcelas_fat = count($Q_faturamento);            // no caso da tabela faturamentos devemos dividir o valor pago e as tarifas pelo total de parcelas encontradas            if ($t_parcelas_fat > 1) {                $new_vl_pago = $d_v_pago / $t_parcelas_fat;            } else {                $new_vl_pago = $d_v_pago;            }            if ($t_parcelas_fat > 0) {// mensagem caso haja procedimento imbutidos no titulo e tambem se não for encontrado em faturamentos                $msg_pro = "";                $msg_fat = "";                // o loop em si                $list_fat = new ArrayIterator($Q_faturamento);                while ($list_fat->valid()) {                    /* descontamos o valor dos procedimentos para saber o valor real pago pela parcela*/                    if ($list_fat->current()->valor_pro > 0) {                        $vl_pro = $list_fat->current()->valor_pro / $t_parcelas_fat;                    } else {                        $vl_pro = 0;                    }                    /******************************************************************** atualiza o faturamento  ************************************************************/                    $up_faturamento = faturamentos::find($list_fat->current()->id);                    $up_faturamento->update_attributes(                        array(                            'status' => 1,                            'tipo_baixa' => 'B',                            'dt_pagamento' => $d_dt_liquidacao,                            'valor_pago' => ($new_vl_pago - $vl_pro),                            'ultima_alteracao' => date("Y-m-d h:m:s"),                            'flag_pago' => 'PAGO',                            'usuarios_id' => $COB_Usuario_Id,                        ));                    /* verifica se existe procedimento atrelhado a este titulo consultas ou exames */                    $up_procedimentos = procedimentos::find_by_faturamentos_id($list_fat->current()->id);                    if ($up_procedimentos) {                        $msg_pro .= " | Parcela possui procedimento.";                        $up_procedimentos->update_attributes(array('status' => 3, 'obs' => 'Procedimento pago titulo nº ' . tool::CompletaZeros(11, $d_id_titulo_banco) . "-" . $d_dv_id_titulo_banco . ''));                    }                    /*********************************************************** SE POSSUI SEGURO FAZ A INSERÇÃO DO DADOS NA TABELA DE SEGURADOS *************************/                    if ($list_fat->current()->seguro == 1) {                        // passa a matricula a referencia e o tipo de convenio pj ou pf                        $Query_assegurar = seguros::segurar($list_fat->current()->matricula, $list_fat->current()->referencia, $list_fat->current()->tipo_convenio, $COB_Empresa_Id);                        // VERIFICA SE CORREU TUDO BEM NA INSERÇÃO DO DADOS NA TABELA SEGUROS                        if ($Query_assegurar == true) {                            $msg_pro .= " | Associado assegurado!";                        }                    }                    $list_fat->next();                } /* fim do while list faturamentos*/                /******************************************************************** atualiza o titulo ********************************************************************/                $up_titulo = titulos::find($titulo[0]->id);                $up_titulo->update_attributes(                    array(                        'status' => 1,                        'dt_pagamento' => $d_dt_liquidacao,                        'vlr_pago' => $d_v_pago,                        'vlr_tarifa' => $d_v_tarifa_custas,                        'vlr_acrescimos' => $vlr_acrescimos,                        'dt_processamento' => date("Y-m-d h:m:s"),                        'dt_ocorrencia' => $d_dt_liquidacao,                        'dt_efet_cred' => $d_dt_efetivacao,                        'dt_deb_tarifa' => $d_dt_efetivacao,                        'st_flag_ret' => '1',                        'obs' => '<i class="uk-icon-small uk-icon-check uk-text-primary "></i> Titulo compensado.',                        'cod_retorno' => $lote_interno,                        'usuarios_id' => $COB_Usuario_Id                    ));            } else {                $msg_fat = strtoupper(" Titulo " . tool::CompletaZeros(11, $d_id_titulo_banco) . " Sacado " . remessas::Limit($titulo[0]->sacado, 40) . " Não encontrado em faturamentos.");                $erros++;            }            $conteudo .= strtoupper(tool::CompletaZeros(5, $registros) . " ## TITULO COMPENSADO EM REDE BANCARIA ## Titulo nº " . tool::CompletaZeros(11, $d_id_titulo_banco) . " ######  OK! - " . $msg_pro . " - " . $msg_fat);            $conteudo .= chr(13) . chr(10);            $compensados++;            continue;        }        if ($d_cod_mov == "09") {                                      /* codigo de confirmação de baixa de titulo automatica pelo banco*/            /******************************************************************** atualiza o titulo ********************************************************************/            $up_titulo = titulos::find($titulo[0]->id);            $up_titulo->update_attributes(array('obs' => '<i class="uk-icon-small uk-icon-check uk-text-warning "></i> Baixa automatica pelo banco titulo vencido a mais de 90 dias.', 'cod_retorno' => $lote_interno, 'vlr_tarifa' => $d_v_tarifa_custas, 'status' => '3'));            /* recuperamos todas as parcelas referentes aquele titulo*/            $Q_faturamento = faturamentos::find_by_sql("SELECT * FROM faturamentos WHERE titulos_bancarios_id='" . $titulo[0]->id . "' AND contas_bancarias_id='" . $Query_retorno->contas_bancarias_id . "'");            $t_parcelas_fat = count($Q_faturamento);            $list_fat = new ArrayIterator($Q_faturamento);            while ($list_fat->valid()):                /******************************************************************** atualiza o faturamento  ************************************************************/                $up_faturamento = faturamentos::find($list_fat->current()->id);                $up_faturamento->update_attributes(                    array(                        'status' => 0,                        'titulos_bancarios_id' => '0',                        'ultima_alteracao' => date("Y-m-d h:m:s"),                        'obs' => 'TITULO BAIXADO PELO BANCO. VENCIDO A MAIS DE 90 DIAS TITULO Nº ' . $titulo[0]->id . '',                        'usuarios_id' => $COB_Usuario_Id,                        'flag_pago' => 'PARCELA SEM TITULO',                        'nossonumero' => $titulo[0]->id /* se houver nosso numero e o titulos for 0 indica que esse titulo foi baixado pelo banco*/                    ));                $list_fat->next();            endwhile;            /******************************************************************** escreve no log ********************************************************************/            echo "<hr><div class='uk-alert uk-alert-warning' style='margin-bottom:0px;'> Baixa automatica pelo banco titulo vencido a mais de 90 dias Titulo nº  " . $d_id_titulo_banco . "-" . $d_dv_id_titulo_banco . "</div></br>";            $conteudo .= strtoupper(tool::CompletaZeros(5, $registros) . " ## BAIXA AUTOMATICA PELO BANCO TITULO VENCIDO A MAIS DE 90 DIAS ## Titulo nº " . tool::CompletaZeros(11, $d_id_titulo_banco) . " ######  OK!");            $conteudo .= chr(13) . chr(10);            $baixados++;            continue;        }        if ($d_cod_mov == "10") {                                     /* codigo de confirmação de baixa de titulo a pedido do cliente*/            /******************************************************************** atualiza o titulo ********************************************************************/            $up_titulo = titulos::find($titulo[0]->id);            $up_titulo->update_attributes(array('obs' => '<i class="uk-icon-small uk-icon-check uk-text-primary "></i> Titulo baixado pelo cliente.', 'cod_retorno' => $lote_interno, 'vlr_tarifa' => $d_v_tarifa_custas));            /******************************************************************** escreve no log ********************************************************************/            $conteudo .= strtoupper(tool::CompletaZeros(5, $registros) . " ##  SOLICITAÇÃO DE BAIXA CONFIRMADA PELO BANCO PARA O TITULO     ## Titulo nº " . tool::CompletaZeros(11, $d_id_titulo_banco) . "-" . $d_dv_id_titulo_banco) . " ######  OK!";            $conteudo .= chr(13) . chr(10);            $baixados++;            continue;        }        if ($d_cod_mov == "14") {                                     /* codigo de confirmação de alteração de vencimento*/            /******************************************************************** atualiza o titulo ********************************************************************/            $up_titulo = titulos::find($titulo[0]->id);            $up_titulo->update_attributes(array('obs' => '<i class="uk-icon-small uk-icon-check uk-text-primary "></i> Alteração de vencimento confirmada pelo banco.', 'cod_retorno' => $lote_interno));            /******************************************************************** escreve no log ********************************************************************/            $conteudo .= strtoupper(tool::CompletaZeros(5, $registros) . " ## ALTERAÇÃO DE VENCIMENTO CONFIRMADA ## Titulo nº " . tool::CompletaZeros(11, $d_id_titulo_banco) . "-" . $d_dv_id_titulo_banco);            $conteudo .= chr(13) . chr(10);            $alterados++;            continue;        }        if ($d_cod_mov == "27") {                                     /* codigo de confirmação de alteração de dados*/            /******************************************************************** atualiza o titulo ********************************************************************/            $up_titulo = titulos::find($titulo[0]->id);            $up_titulo->update_attributes(array('obs' => '<i class="uk-icon-small uk-icon-check uk-text-primary "></i> Alteração de dados confirmada pelo banco.', 'cod_retorno' => $lote_interno));            /******************************************************************** escreve no log ********************************************************************/            $conteudo .= strtoupper(tool::CompletaZeros(5, $registros) . " ## ALTERAÇÃO DE DADOS CONFIRMADA ## Titulo nº " . tool::CompletaZeros(11, $d_id_titulo_banco) . "-" . $d_dv_id_titulo_banco);            $conteudo .= chr(13) . chr(10);            $alert++;            $alterados++;        }        $registros++;        continue;    }    /********************************************************** se o segmento da linha for "" ou 1 trailher ***********************************************/    if ($tipo_reg == 9 or $tipo_reg == "") {        continue;    }    $h_lote_interno = $lote_interno;} /* fim do while linha*//****************************************************** arquivo de log  **********************************************************************************///diretorio$caminho = "../../../../arquivos/retornos/logs/emp_" . $COB_Empresa_Id . "_bank_" . $Query_retorno->cod_banco . "";// verifica se o caminho onde deve ser salvo arquivo existe se não criaif (!file_exists($caminho)) {    mkdir($caminho, 0777, true);/*cria o diretorio do arquivo*/}if (!$handle = fopen($caminho . "/" . $filename_log, 'w')) {    echo "<div class='uk-alert uk-alert-warning'> Não foi possivel abrir o arquivo de log.</div>";}if (fwrite($handle, "$conteudo") === FALSE) {    echo "<div class='uk-alert uk-alert-warning'> Não foi possivel escrever o arquivo de log.</div>";}fclose($handle);/******************************************************************** atualiza o retorno **********************************************************************************/$Query_retorno->update_attributes(    array('dt_processamento' => date("Y-m-d"),        't_linhas' => $registros,        't_baixa' => $baixados,        't_compensados' => $compensados,        't_erros' => $erros,        'lote_retorno' => $h_lote_interno,        'path_log' => $caminho . "/" . $filename_log,        'status' => 1,        'vlr_credito_arq' => $creditos,        'vlr_debito_arq' => $debitos    ));if (!$Query_retorno) {    echo "<div class='uk-alert uk-alert-warning'> <i class='uk-icon-warning uk-text-warning'></i>Erro ao atualizar dados do retorno " . $Query_retorno->nm_arquivo . ".</br></div>";    die();}if ($creditos > 0) {    /********************************************** lançamentos no caixa  **********************************************************************************/    // recupera o centro de custo e plano de conta padrao da conta    $dados_config = configs::find_by_empresas_id($COB_Empresa_Id);    // query para recupera a forma de recebimento padrão dessa conta    $Query_conta_bancaria = contas_bancarias::find($Query_retorno->contas_bancarias_id);    // cria o historico do lançamento no credito    $historico_C = 'CREDITO COMPENSAÇÃO BANCARIA';    $detalhes_C = 'CREDITO RECEBIMENTO BANCARIO LOTE : ' . $h_lote_interno . ' OCORRENCIA : ' . tool::InvertDateTime(tool::LimpaString($d_dt_liquidacao), "-") . ' n\r\  Titulos :' . $titulos . '';    // cria o historico do lançamento no debito    $historico_D = 'DEBITO TARIFA BANCARIA.';    $detalhes_D = 'DEBITO TARIFA COMPENSAÇÃO BANCARIA LOTE : ' . $h_lote_interno . ' OCORRENCIA : ' . tool::InvertDateTime(tool::LimpaString($d_dt_liquidacao), "-") . ' n\r\  Titulos :' . $titulos . '';    // lança os creditos na caixa    $caixa = caixa::create(        array('historico' => $historico_C,            'detalhes' => $detalhes_C,            'valor' => tool::limpaMoney(number_format($creditos, 2, ',', '.')),            'data' => $d_dt_efetivacao,            'tipolancamento' => 1,            'tipo' => 'c',            'numdoc' => 'CCB_' . tool::LimpaString($d_dt_liquidacao),            'formas_recebimentos_id' => $Query_conta_bancaria->formas_recebimentos_id,            'clientes_fornecedores_id' => "2.0000000000", // SERÁ ADIONADO O ZERO ANTES NA PRIMEIRA PÓSIÇÃO INDICANDO QUE É RECEBIMENTO DE BOLETO BANCARIOS            'planos_contas_id' => $dados_config->planos_contas_id,            'centros_custos_id' => $dados_config->centros_custos_id,            'contas_bancarias_id' => $Query_retorno->contas_bancarias_id,            'empresas_id' => $COB_Empresa_Id,            'usuarios_id' => $COB_Usuario_Id        ));    // lança os debitos caixa    $caixa = caixa::create(        array('historico' => $historico_D,            'detalhes' => $detalhes_D,            'valor' => tool::limpaMoney(number_format($debitos, 2, ',', '.')),            'data' => $d_dt_liquidacao,            'tipolancamento' => 1,            'tipo' => 'd',            'numdoc' => 'DTB_' . tool::LimpaString($d_dt_liquidacao),            'formas_recebimentos_id' => $Query_conta_bancaria->formas_recebimentos_id,            'clientes_fornecedores_id' => "2.0000000000", // SERÁ ADIONADO O ZERO ANTES NA PRIMEIRA ÓSIÇÃO INDICANDO QUE É RECEBIMENTO DE BOLETO BANCARIOS            'planos_contas_id' => $dados_config->planos_contas_id_d,            'centros_custos_id' => $dados_config->centros_custos_id,            'contas_bancarias_id' => $Query_retorno->contas_bancarias_id,            'empresas_id' => $COB_Empresa_Id,            'usuarios_id' => $COB_Usuario_Id        ));}echo '<div class="uk-alert" style="margin-bottom:0px;"> Arquivo Processado com sucesso ( ' . ($registros) . ' ) titulos processados.</div></br>';/**************************************************************** verifica se ouve erros ********************************************************/if ($erros > 0) {    /* adcionamos uma notificação avisando que o retorno possui erros */    $obs = 'Encontramos inconsistencias no retorno favor verificar o arquivo de log ->';    $obs .= '<a href="assets/cobranca/retorno/controllers/Controller_dow_log.php?id=' . $Query_retorno->id . ' target="blank" class="uk-button uk-button-small" style="border-left:1px solid #ccc; float: right;" > <i class="uk-icon-search " ></i> Detalhes </a>';    $create_notificacao = notificacoes::create(array(        'usuarios_id' => $COB_Usuario_Id,        'msg' => 'Erro de Processamento de Retorno.',        'obs' => $obs,        'indice' => 3,//importancia da msg 0 pouco importante, 1 normal, 2 importante e 3 urgente        'data_hora' => date("Y-m-d h:m:s"),        'empresas_id' => $COB_Empresa_Id    ));// Inclui o arquivo class.phpmailer.php localizado na pasta phpmailer    require("../../../../library/PHPMailer/PHPMailerAutoload.php");// enviamos um email ao suporte para verificações    $arquivo = $caminho . "/" . $filename_log;    echo '<div class="uk-alert uk-alert-danger" style="margin-bottom:0px;">  Titulos com erros ' . $erros . '<a href="assets/cobranca/retorno/controllers/Controller_dow_log.php?id=' . $Query_retorno->id . ' target="blank" class="uk-button uk-button-small" style="border-left:1px solid #ccc; float: right;" > <i class="uk-icon-download " ></i> Download </a></div></br>';    echo suporte::Email_Suporte("Log de erros", "Erro ao processar retorno", $COB_Empresa_Id, $arquivo);    if ($alterados > 0) {        echo "<hr><div class='uk-alert uk-alert-warning' style='margin-bottom:0px;'> Titulos baixados " . $alterados . "</div></br>";    }    if ($baixados > 0) {        echo "<div class='uk-alert uk-alert-warning' style='margin-bottom:0px;'> Titulos baixados " . $baixados . "</div></br>";    }    if ($cancelados > 0) {        echo "<div class='uk-alert uk-alert-warning' style='margin:0;'> Titulos baixados pelo banco  " . $cancelados . "</div></br>";    }    if ($compensados > 0) {        echo "<div class='uk-alert uk-alert-success' style='margin-bottom:0px;'> Titulos Compensados " . $compensados . "</div></br>";    }} else {    if ($alterados > 0) {        echo "<div class='uk-alert uk-alert-warning' style='margin-bottom:0px;'> Titulos baixados " . $alterados . "</div></br>";    }    if ($baixados > 0) {        echo "<div class='uk-alert uk-alert-warning' style='margin-bottom:0px;'> Titulos baixados " . $baixados . "</div></br>";    }    if ($cancelados > 0) {        echo "<div class='uk-alert uk-alert-warning' style='margin:0;'> Titulos baixados pelo banco  " . $cancelados . "</div></br>";    }    if ($compensados > 0) {        echo "<div class='uk-alert uk-alert-success' style='margin-bottom:0px;'> Titulos Compensados " . $compensados . "</div></br>";    }}?>